#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#

# Karsten Sch√∂ke <karsten.schoeke@geobasis-bb.de>

#read the nsSysHealthTable from
#.1.3.6.1.4.1.5951.4.1.1.41.7
import re

def inventory_netscaler_psus(info):
    inventory = []
    for CounterName, CounterValue in info:
        CounterValue=int(CounterValue)
        #if "PowerSupply" in CounterName:
        if re.match('PowerSupply[\d]Status',CounterName):
            if CounterValue > 0:
                inventory.append( (CounterName[:-6], None) )
    return inventory

def check_netscaler_psus(item, _no_params, info):
    rc = 0
    message = "Status: "

    ps_status_map = ( ("not supported", 3),# 0
                      ("not present", 0),  # 1
                      ("failed", 2),       # 2
                      ("normal", 0),       # 3
                     )

    for CounterName, CounterValue in info:
        if CounterName[:-6] == item:
            CounterValue=int(CounterValue)
            name, state = ps_status_map[CounterValue]

            # check ps status
            if CounterValue == 0 or CounterValue >= len(ps_status_map):
                message += "%s" % CounterValue
                rc = 3
            elif CounterValue ==2:
                message += "%s" % name
                rc = ps_status_map[CounterValue][1]
            else:
                message += "%s" % name
                rc = ps_status_map[CounterValue][1]

            return rc, message

    return 3, "No PSUS %s found" % item

check_info["netscaler_psus"] = {
    "check_function"        : check_netscaler_psus,
    "inventory_function"    : inventory_netscaler_psus,
    "service_description"   : "%s",
    "has_perfdata"          : False,
    "snmp_info"             : (".1.3.6.1.4.1.5951.4.1.1.41.7.1", [1, 2]),
                              # sysHealthCounterName, sysHealthCounterValue
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951"),
    }
